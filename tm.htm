<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Teeny Machine Interpreter</title>
    <script type="text/javascript" src="js/jquery-1.7.1.js"></script>
    <script type="text/javascript" src="js/jquery-ui-1.8.17.custom.min.js"></script>
    <script type="text/javascript" src="js/underscore-min.js"></script>
    <script type="text/javascript" src="js/executionManager.js"></script>
    <link rel="stylesheet" type="text/css" href="css/custom-theme/jquery-ui-1.8.17.custom.css" />
    <style type="text/css">
	html, body
	{
	    height: 100%;
	    min-height: 100%;
	    padding: 0;
	    margin: 0;
	    z-index: 10;
	}
	#codeentry, #codeentry > .background
	{
	    position: absolute;
	    width: 100%;
	    height: 100%;
	    z-index: 30;
	}
	#codeentry > .background
	{
	    opacity: 0.5;
	    filter: alpha(opacity=50);
	    background-color: #000;
	    z-index: 20;
	}
	#codeentry > .entry
	{
	    position: absolute;
	    height: auto;
	    bottom: 0;
	    top: 0;
	    margin: 20px 0;
	    width: 100%;
	    /*padding: 20px 0;*/
	    z-index: 30;
	}
	#codeentry > .entry > div
	{
	    position: relative;
	    background-color: #FFF;
	    height: 100%;
	    width: 800px;
	    margin: 0 auto;
	}
	#entryform > div.textarea
	{
	    position: absolute;
	    height: auto;
	    width: auto;
	    bottom: 0;
	    top: 0;
	    left: 0;
	    right: 0;
	    margin: 4px 4px 48px 4px;
	}
	#entryform textarea
	{
	    width: 786px;
	    height: 100%;
	    resize: none;
	}
	#entryform > div.submit
	{
	    width: 100%;
	    text-align: right;
	    position: absolute;
	    bottom: 8px;
	}
	#controlpane
	{
	    position: relative;
	    width: 260px;
	    overflow-y: scroll;
	    overflow-x: hidden;
	    height: 100%;
	    float: left;
	}
	.register
	{
	    height: 40px;
	    margin: 2px 0;
	    background-color: #EEE;
	    text-align: right;
	}
	.register > div.name
	{
	    font-size: .8em;
	    font-weight: bold;
	    text-align: left;
	}
	.register > div > span
	{
	    font-weight: normal;
	}
	#code
	{
	    /*float: left;*/
	}
	#memory
	{
	    /*float: left;*/
	    height: 100%;
	    overflow-x: scroll;
	    text-align: right;

	    -webkit-column-width: 170px;
	    -moz-column-width: 170px;
	    column-width: 170px;
	    -webkit-column-fill: auto;
	    -moz-column-fill: auto;
	    column-fill: auto;
	}
	#memory > div
	{
	    break-inside: avoid;
	    -webkit-column-break-inside: avoid;
	    -moz-column-break-inside: avoid;
	    background-color: #EEE;
	    margin: 0 7px 4px 3px;
	}
	#memory > div > .cellHeader
	{
	    height: 14px;
	    background-color: #888;
	}
	#memory > div > .cellHeader .left
	{
	    width: 0px;
	    overflow: visible;
	    float: left;
	}

	#memory > div > .cellHeader .right
	{
	    top: -100%;
	    text-align: right;
	    padding-right: 4px;
	    overflow: visible;
	    float: right;
	}
	#memory > div > .cellHeader
	{
	    color: #FFF;
	    font-size: 11px;
	    font-family: sans-serif;
	    text-align: left;
	    padding-left: 4px;
	}
	#memory > div > .value
	{
	    height: 24px;
	    font-size: 1.1em;
	    padding-top: .2em;
	}
	.gp .cellHeader
	{
	    background-color: #0050DF !important;
	}
	.sp .cellHeader
	{
	}
	.fp .cellHeader
	{
	}
	.runcontrols
	{
	    position: absolute;
	    left: 0;
	    right: 0;
	    bottom: 5px;
	}
	.runcontrols > div
	{float: left;
	    position: relative;
	    left: 50%;
	}
	.runcontrols > div > div
	{
	    float: left;
	    font-size: .75em;
	    position: relative;
	    right: 50%;
	}
	#runspeed
	{
	    padding-right: 63px;
	}
	#runspeed .display
	{
	    width: 58px;
	    float: left;
	    position: relative;
	    margin-right: -68px;
	}
	#runspeed .display input
	{
	    width: 32px;
	    margin-right: 5px;
	}
	#runspeed .slider
	{
	    width: 100%;
	    float: left;
	    position: relative;
	}
	#runspeed .slider > div
	{
	    margin: 6px 18px 11px 6px;
	}
	.clear
	{
	    clear: both;
	}
	/*clearfix:after
	{
	    content: ".";
	    display: block;
	    height: 0;
	    clear: both;
	    visibility: hidden;
	}*/	    
    </style>
    <script type="text/javascript">
    //<![CDATA[ 
	var ultd = "ultd";
	var runspeedSubscribers = [];

	function cpu(settings, mem)
	{
	    if(!mem)
	    {
		alert("Every good processor needs memory!");
		return false;
	    }
	    var self = this;
	    this.mem = mem;
	    this.reset = function(redraw)
	    {
		if(redraw === undefined) redraw = true;
		for(i = 0; i<8; i++) this.registers[i] = 0;
		if(redraw)this.draw();
	    }
	    this.loadProgram = function(program)
	    {
		this.program = program;
	    }
	    this.unloadProgram = function()
	    {
		delete this.program;
	    }
	    this.hasProgram = function()
	    {
		return this.program;
	    }
	    this.draw = function()
	    {
		self.jqCells.val(function(i){return self.registers[i]});
		self.jqStatus.html(self.status);
	    }

	    this.registers = [];
	    this.reset(false);

	    this.processInstruction = function(incrementPC)
	    {
		if(incrementPC === undefined) var incrementPC = true;

		var instructions = self.program.instructions;
		var regs = self.registers;
		var mem = self.mem;
		var dbg_ino = regs[7];
		var inst = instructions[regs[7]];
		var instName = inst.name;
		var oldPtrs = [regs[4], regs[5], regs[6]];
		switch(instName)
		{
		    case "LDA": regs[inst[0]] = regs[inst[2]] + inst[1];
			break;
		    case "LDC": regs[inst[0]] = inst[1];
			break;

		    case "LD":
			regs[inst[0]] = parseInt(mem.readAddr(regs[inst[2]] + inst[1]));
			break;
		    case "ST":
			mem.writeAddr(regs[inst[2]] + inst[1], regs[inst[0]]);
			break;

		    case "ADD": regs[inst[0]] = regs[inst[1]] + regs[inst[2]]; 
			break;
		    case "SUB": regs[inst[0]] = regs[inst[1]] - regs[inst[2]]; 
			break;
		    case "MUL": regs[inst[0]] = regs[inst[1]] * regs[inst[2]]; 
			break;
		    case "DIV": regs[inst[0]] = ~~(regs[inst[1]] / regs[inst[2]]); 
			break;

		    case "JEQ": shouldJump = regs[inst[0]] == 0;
			break;
		    case "JNE": shouldJump = regs[inst[0]] != 0;
			break;
		    case "JLT": shouldJump = regs[inst[0]] < 0;
			break;
		    case "JLE": shouldJump = regs[inst[0]] <= 0;
			break;
		    case "JGT": shouldJump = regs[inst[0]] > 0;
			break;
		    case "JGE": shouldJump = regs[inst[0]] >= 0;
			break;

		    case "IN": regs[0] = prompt("Input stuff: ");
			break;
		    case "OUT": alert(regs[0]);
			break;

		    case "HALT": self.status = "stopped";
			break;
		}

		if(incrementPC)regs[7]++;

		if(instName.charAt(0) == "J")
		    if(shouldJump) regs[inst[2]] += inst[1]; 

		//for

		if(!instructions[regs[7]] || !instructions[regs[7]].name)
		{
		    alert("The program attempted to access the invalid instruction " +
			    regs[7] + ".\n@instruction: " + dbg_ino);
		    self.status = "errawr";
		}

		self.draw();
		return self.status == "running";
	    }

	    this.status = "stopped";
	    var exManager;
	    this.regnames = ["ac0", "ac1", "ac2", "ac3", "GP", "FP", "SP", "PC"];

	    this.start = function()
	    {
		if(!this.hasProgram()) return false;
		self.status = "running";
		this.exManager.start();
	    }
	    this.stop = function()
	    {
		self.status = "stopped";
		self.exManager.stop();
	    }
	    this.step = function()
	    {
		if(!this.hasProgram()) return false;
		else self.exManager.step();
	    }
	    $(function()
	    {
		cpuregs = $("#cpuregs")
		cpuregs.html(function(){
			var code = "";
			for(n in self.regnames)
			{
			    code += '<div id="reg'+n+'" class="register">'+
					'<div class="name">'+
					    n + ' - ' + self.regnames[n] +
					'</div>' +
					'<div class="value"></div>' +
				    '</div>'
			}
			return code; });
		self.jqCells = cpuregs.find(".register");
		self.jqStatus = $("#cpustatus");

		self.loadProgram(new program("0: JEQ  3 -1 7"));
		self.exManager = new timedStepExManager(function(){return self.instsPerSec}, settings, self.processInstruction);
		self.unloadProgram();
		self.reset(false);

		self.draw();
	    });
	}
	
	function mem(vm, settings)
	{
	    var self = this;
	    this.vm = vm;
	    this.settings = settings;
	    this.size = settings.memsize;
	    this.oldPtrs = [];
	    this.reset = function()
	    {
		self.cells.val("");
		$("#mem0").val(self.size-1);
		$(self.cells[0]).gp(false).fp(false).sp(false);
		self.cells.showHideCellHeader();
		for(i in self.oldPtrs) self.oldPtrs[i] = 0;
	    };

	    this.readAddr = function(addr)
	    {
		return this.cells[addr].val();
	    }

	    this.writeAddr = function(addr, value)
	    {
		this.cells[addr].val(value);
	    }

	    $.fn.extend({ //clearFloatingChildren, gp, sp, fp, regPtr
		clearFloatingChildren : function(){
		    this.children().last().after('<div class="clear"></div>');
		    return this;
		},
		gp: function(clear){
		    return this.regPtr("gp", clear);
		},
		sp: function(clear)
		{
		    return this.regPtr("sp", clear);
		},
		fp: function(clear)
		{
		    return this.regPtr("fp", clear);
		},
		regPtr: function(name, clear)
		{
		    if(clear)this.removeClass(name);
		    else
		    {
			$(self.cells[self.oldPtrs[name]]).toggleClass(name);
			self.oldPtrs[name] = this.data("address");
			this.toggleClass(name);
		    }
		return this;
		}});

	    $.fn.extend({showHideCellHeader :
		function(){
		    return this.each(function()
			{
			    jqThis = $(this);
			    if(!jqThis.hasClass("memCell")) return;
			    var i = jqThis.data("address");
			    if(!((self.size-i-1) % self.vm.settings.addrPrintInterval) || jqThis.hasClass("gp")
				    || jqThis.hasClass("sp") || jqThis.hasClass("fp"))
				jqThis.children(".cellHeader").css("display", "block");
			    else jqThis.children(".cellHeader").css("display", "none");
			});
		}
	    });
	
	    $(function()
	    {
		memCells = "";
		for(i=self.size-1; i>=0; i--)
		{
		    memCells += '<div class="memCell" id="mem'+i+'">' +
				    '<div class="cellHeader">' +
					'<div class="left">' + i + '</div>' + 
					'<div class="right">fabulous</div>' +
				    '</div>' +
				    '<div class="value">' +
				    (self.size - i - 1).toString() +
				    '</div>' +
				'</div>';
		}
		$("#memory").append(memCells);
		self.cells = $("#memory").find(".memCell").reverse();
		self.cells.each(function(i){$(this).data("address", i)});
	    });
	}

	function settings()
	{
	    this.defaultInstsPerSec = 5;
	    this.timingTestIterations = 500;
	    this.responsiveness = .03;
	    this.addrPrintInterval = 4;
	    this.memsize = 100;
	}

	function program(text)
	{
	    this.text = text;
	    this.parse = function()
	    {
		var instructions = [];
		var lines = (this.text+"\n ").split("\n");
		var rline = /^ *[0-9]+[\s]*: /gm;
		var rinst = /[a-zA-Z]+/g
		var rabc = /[, \t]*((-?[0-9]+|[a-zA-Z]+[0-9]?)|\(-?[0-9]+|[a-zA-Z]+[0-9]?\))/g;
		var rnum = /-?[0-9]+|[a-zA-Z]+[0-9]?/

		for(l in lines)
		{
		    line = lines[l];
		    var match;
		    rline.lastIndex = 0;
		    if((match = rline.exec(line)) == null) continue;
		    rinst.lastIndex = rline.lastIndex;
		    var instNo = parseInt(rnum.exec(match));
		    instructions[instNo] = [];

		    if((match = rinst.exec(line)) == null)
		    {
			alert("Invalid assembly: line with no instruction name.");
			return false;
		    }
		    instructions[instNo].name = match.toString().toUpperCase();
		    rabc.lastIndex = rinst.lastIndex;

		    for(i=0; i<3; i++)
		    {
			if((match = rabc.exec(line)) == null)
			{
			    alert("Invalid assembly: instruction not comprised of three values.");
			    return false;
			}
			var tempmatch = rnum.exec(match).toString().toUpperCase();
			//alert('tempmatch: "'+ tempmatch +'"');
			if(tempmatch.charAt(0).match(/[a-zA-Z]/)){
			    //alert("named register!");
			    instructions[instNo][i] = regnames.indexOf(tempmatch);
			}
			else instructions[instNo][i] = parseInt(tempmatch);
		    }
		}
		return instructions;
	    }
	    this.instructions = this.parse(text);
	}

	function ui()
	{
	    var self = this;
	    $(document).ready(function()
	    {
		runbuttons = $("#runbuttons")
		runbuttons.children("a").each(
			function(i){ 
			    $(this).button({text: false,
				icons:{primary: $(this).data("img-class")},
				label: $(this).text()});
			    $(this).attr("href", "javascript:"); //prevent clicking on an a from reloading the page
			});
		runbuttons.buttonset();
		slider = $("#runspeed .slider");
		slider.html('<div><div class="control"></div></div>');
		//slider.html('<div class="control"></div>');

		slider = slider.find(".control");
		runspeedSubscribers = [slider, $("#textspeed"),
				    {val: function(v){vm.cpu.instsPerSec = v;}}];
		range = {min: 1, max: 500, value: vm.settings.defaultInstsPerSec};
		slider.slider($.extend(range, 
			{slide: function(event, ui)
			{
			    val = ui.value;
			    if(val == range.max) val = ultd;
			    for(s in runspeedSubscribers)
			    {
				subscriber = runspeedSubscribers[s];
				if(!subscriber || typeof val != "number" && isSlider(subscriber)) continue;
				subscriber.val(val);
			    }
			}}));
		//slider.removeAttr("class");
		$("#runcontrols").wrap('<div class="runcontrols"><div></div></div>'); //for css hax to centerbuttons
		$("#runspeed").clearFloatingChildren();
		

		//slider.trigger('slide');
		slider.slider('option', 'slide').call(slider, null, {value: slider.slider("value")}); //what a bitch.
	    });
	}
	
	function vm()
	{
	    var self = this;
	    this.reset = function()
	    {
		self.cpu.reset();
		self.mem.reset();
	    }
	    this.settings = new settings();
	    this.mem = new mem(this, this.settings);
	    this.cpu = new cpu(this.settings, this.mem);
	    this.ui = new ui(this);

	    $(self.reset);

	    this.start = function()
	    {
		self.cpu.start();
	    }
	    this.stop = function()
	    {
		self.cpu.stop();
	    }
	    this.step = function()
	    {
		self.cpu.step();
	    }
	}

	$(function()
	{
	    $.fn.reverse = [].reverse;
	    $.valHooks.div = {
		get: function(elem)
		{
		    e = $(elem);
		    if(e.hasClass("memCell") || e.hasClass("register")) return e.find(".value").html();
		},
		set: function(elem, val)
		{
		    e = $(elem);
		    if(e.hasClass("memCell") || e.hasClass("register")) return e.find(".value").html(val);
		}
	    };
	});	

	function isSlider(x)
	{
	    return x.jquery && typeof(x.slider("value")) == "number";
	}

	function openCodeEntry()
	{
	    $('#codeentry').css('display', 'block');    
	    if(vm.program && vm.program.text != "")
		$('#assemblytext').val(vm.program.text);
	}
	function closeCodeEntry()
	{
	    $('#codeentry').css('display', 'none');
	    vm.reset();
	}

	var vm = new vm();

	//]]>
    </script>
</head>
<body>
    <div id="codeentry" style="display:none">
	<div class="background"></div>
	<div class="entry">
	    <div><form method="post" action="javascript:" onSubmit="vm.cpu.loadProgram(new program($('#assemblytext').val())); closeCodeEntry(); return false;" id="entryform">
		    <div class="textarea"><textarea id="assemblytext">Enter your assembly here.</textarea></div>
		    <div class="submit">
			    <a href="javascript:closeCodeEntry()">cancel</a>
			    &nbsp;&nbsp;
			    <input type="submit" value="Load"  />
		    </div>
	    </form></div>
	</div>
    </div>
    <div id="controlpane">
	<div>Processor</div>
	<div>Status: <span id="cpustatus"></span></div>
	<div id="cpuregs">Registers:
	</div>
	<div id="runcontrols">
	<form>
	    <div id="runspeed">
		<div class="slider" id="realslider"></div>
		<div class="display">
		    <input id="textspeed" type="textbox" maxlength="4"></input>i/s
		</div>
	    </div>
	    <div id="runbuttons">
		<a onClick="openCodeEntry()" data-img-class="ui-icon-arrowreturnthick-1-n">load code</a>
		<a onClick="vm.reset()" data-img-class="ui-icon-seek-first">reset execution</a>
		<a onClick="vm.stop()" data-img-class="ui-icon-stop">stop</a>
		<a onClick="vm.start()" data-img-class="ui-icon-play">run</a>
		<a onClick="vm.step()" data-img-class="ui-icon-carat-1-e">step</a>
	    </div>
	</form>
    	</div>
    </div>
    <div id="code"></div>
    <div id="memory"></div>

</body>
</html>
